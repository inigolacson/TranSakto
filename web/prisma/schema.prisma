generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(uuid())
  name  String
  email String @unique

  stores Store[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Store {
  id     String @id @default(uuid())
  name   String
  userId String

  user     User      @relation(fields: [userId], references: [id])
  cashiers Cashier[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cashier {
  id      String @id @default(uuid())
  name    String
  storeId String

  store        Store         @relation(fields: [storeId], references: [id])
  transactions Receipt[]
  products     Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Receipt {
  id            String   @id @default(uuid())
  dateTime      DateTime
  cashierId     String
  cashReceived  Float

  cashier          Cashier           @relation(fields: [cashierId], references: [id])
  transactionItems TransactionItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id        String  @id @default(uuid())
  name      String
  imageUrl  String?
  price     Decimal
  cashierId String
  stock     Int

  cashier          Cashier           @relation(fields: [cashierId], references: [id])
  transactionItems TransactionItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransactionItem {
  productId     String
  transactionId String
  price         Decimal
  quantity      Int

  product     Product     @relation(fields: [productId], references: [id])
  transaction Receipt @relation(fields: [transactionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([productId, transactionId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
